---

# @title_es Añadir el repositorio de passenger
# @title_en Adding passenger repository
# @input #{shell}
## Nginx + Passenger
- name: Manually add passenger repository
  become: true
  shell: curl --fail -sSLo /etc/yum.repos.d/passenger.repo https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo
  when: include_passenger == true

# @title_es Instalar nginx y phusion passenger
# @title_en Install nginx and phusion passenger
# @input #{shell}
- name: Manually install nginx and passenger
  become: true
  shell: yum install -y nginx-mod-http-passenger || sudo yum-config-manager --enable cr && sudo yum install -y nginx-mod-http-passenger
  when: include_passenger == true

# @title_es Copiar el fichero de configuración de passenger
# @title_en Copy passenger config file
# @input
# f{passenger.conf.j2}
- name: Copy the passenger config file
  become: true
  template:
    src: passenger.conf.j2
    dest: "{{nginx_config}}/conf.d/passenger.conf"
  when: include_passenger == true
## ./ Nginx + Passenger

## Nginx alone
- name: Install Nginx
  become: true
  package:
    name: nginx
    state: latest
  when: include_passenger == false
## ./ Nginx alone

# @title_es Copiar el fichero de configuración de nginx
# @title_en Copy nginx config file
# @comment_es Copiar en `#{template>dest}`
# @comment_en Copy in `#{template>dest}`
# @input
# f{nginx.conf.j2}
- name: Copy the nginx config file
  become: true
  template:
    src: nginx.conf.j2
    dest: "{{nginx_config}}/nginx.conf"

# @title_es Copiar el fichero de configuración de monit para nginx en #{copy>dest}
# @title_en Copy monit config file for nginx to #{copy>dest}
# @comment_es Copiar en `#{copy>dest}`
# @comment_en Copy in `#{copy>dest}`
# @input f{nginx.monit}
- name: Copy the nginx monit service files
  become: true
  copy:
    src: nginx.monit
    dest: /etc/monit.d/nginx.monit
  notify:
    - Reload Monit

# @title_es Parar nginx antes de borrar y añadir nuevos usuarios y grupos
# @title_en Halt nginx before removing default user/group and adding new ones
# @input systemctl stop nginx
- name: Ensure nginx is not running before removing default user and group
  become: true
  service: name=nginx state=stopped

# @title_en Borrar el usuario y grupo nginx
# @title_es Remove the nginx user and group
# @input
# userdel nginx
# groupdel nginx
- name: Remove the nginx user
  become: true
  user:
    name: nginx
    state: absent

- name: Remove the nginx group
  become: true
  group:
    name: nginx
    state: absent

# @title_es Crear grupo  #{group>name}
# @title_en Create group #{group>name}
# @input groupadd #{group>name}
- name: Create the "{{nginx_group}}" group
  become: true
  group:
    name: "{{nginx_group}}"
    system: yes
    state: present

# @title_es Crear usuario #{user>name}
# @title_en Create user #{user>name}
# @input useradd -m -d #{user>home} -g #{user>group} #{user>name}
- name: Create the "{{nginx_user}}" user
  become: true
  user:
    name: "{{nginx_user}}"
    group: "{{nginx_group}}"
    system: yes
    home: "{{nginx_home}}"
    comment: Web server
    shell: /sbin/nologin
    state: present

# @title_es Dar permisos a la home del nuevo grupo
# @title_en Grant permissions to the new group home directory
# @input chmod 770 #{file>path}
- name: Add group permissions
  file:
    path: "{{nginx_home}}"
    mode: u=rwx,g=rwx

# @title_es Crear directorio de sites-enabled
# @title_en Create sites-enabled directory
# @input mkdir #{file>path}
- name: Create {{nginx_config}}/sites-enabled directory
  become: true
  file:
    state: directory
    path: "{{nginx_config}}/sites-enabled"
    owner: "{{nginx_user}}"
    group: "{{nginx_group}}"
    mode: 0774

# @title_es Crear directorio de sites-available
# @title_en Create sites-available directory
# @input mkdir #{file>path}
- name: Create {{nginx_config}}/sites-available directory
  become: true
  file:
    state: directory
    path: "{{nginx_config}}/sites-available"
    owner: "{{nginx_user}}"
    group: "{{nginx_group}}"
    mode: 0774

# @title_es Crear directorio de modules.conf.d
# @title_en Create modules.conf.d directory
# @input mkdir #{file>path}
- name: Create {{nginx_config}}/modules.conf.d directory
  become: true
  file:
    state: directory
    path: "{{nginx_config}}/modules.conf.d"
    owner: "root"
    group: "root"
    mode: 0774
  when: include_passenger == true

# @title_es Crear enlaces simbólicos para los módulos de nginx
# @title_en Create synlinks for the nginx modules
- name: Create symbolic links for nginx modules
  become: true
  file:
    src: "/usr/share/nginx/modules/{{ item }}"
    dest: "{{ nginx_config }}/modules.conf.d/{{ item }}"
    owner: "root"
    group: "root"
    state: link
  with_items:
    - mod-http-image-filter.conf
    - mod-http-passenger.conf
    - mod-http-perl.conf
    - mod-http-xslt-filter.conf
    - mod-mail.conf
    - mod-stream.conf
  when: include_passenger == true

- name: Open https port in firewall
  become: true
  firewalld: service=https permanent=true state=enabled
  notify: Restart firewalld
  when: include_firewalld == true

- name: Open http port in firewall
  become: true
  firewalld: service=http permanent=true state=enabled
  notify: Restart firewalld
  when: include_firewalld == true


# @title_es Arrancar nginx
# @title_en Start nginx
# @input systemctl start nginx
- name: Ensure nginx is running
  become: true
  service: name=nginx state=started enabled=yes
