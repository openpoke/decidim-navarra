---
# @title Guía de instalación del entorno de Decidim
# @comment En esta guía se detallan los pasos para instalar el entorno y la app de
# Decidim en una máquina con Red Hat 7 desde cero. Al acabar la guía deberíamos tener instalados
# el servidor web (nginx), el servidor de aplicación (Phusion Passenger) y la propia aplicación de Decidim (Ruby on Rails)
# instalados y levantados en la máquina.
# @comment Además de esta guía manual se proporcionará un proyecto en Ansible para provisionar la máquina automáticamente. De hacerlo
# con Ansible no haría falta seguir esta guía.
# @comment Estos son los requisitos de la instalación:
# @comment - Va a haber dos entornos, de pre-producción (decidim-navarra-staging) y producción
# (decidim-navarra-production). Cada uno de ellos va a estar en una máquina cuya IP ha de ser
# añadida en el archivo inventory debajo de cada nombre. Por ejemplo:
# @comment ```
# @comment [decidim-navarra-staging]
# @comment  10.253.110.32
# @comment  [decidim-navarra-staging]
# @comment  10.253.110.32
# @comment ```
# @comment - En cada una de las máquinas ha de existir un usuario root con una clave privada SSH copiada y autorizada
# para poder hacer uso de ella en el provisionamiento (el paso de provisionamiento no pide la password, es todo
# por medio de SSH). Estas máquinas también han de tener acceso al repositorio de decidim
# (https://gesfuentes.admon-cfnavarra.es/git/summary/presidencia!WebParticipacionCiudadana.git)
# @comment - En la estación de trabajo instalar python3, pip3 (`sudo yum install python3-pip`), ansible (`pip3 install ansible`) y passlib (`pip3 install passlib`)
# @comment - Clonar en la estación de trabajo el repositorio de decidim
# (https://gesfuentes.admon-cfnavarra.es/git/summary/presidencia!WebParticipacionCiudadana.git).
# Las recetas de ansible y ficheros necesarios para la ejecución de sus tareas están en
# la carpeta vendor/ansible. En este documento (docs/installation_es.md) están
# las instrucciones para realizar el provisionamiento automático con Ansible así como un
# manual detallando todas las tareas que el propio Ansible automatiza.
# @comment - Antes de lanzar el playbook hay que definir el password del usuario y rellenar los valores de
# bases de datos. Todos esos valores están al final del playbook. Los valores pueden rellenarse en texto plano o
# encriptados.
# @comment Lo primero que hay que hacer es definir un password para nuestro vault. Este password se usará para
# encriptar valores y desencriptarlos al ejecutar cada playbook.
# @comment Para encriptar un valor hay que usar el comando `ansible-vault encrypt_string CADENA_A_ENCRIPTAR --ask-vault-pass`.
# Nos pedirá el password del vault que hemos definido y nos devolverá una cadena que empieza por `!vault | `. Todo
# eso debe ponerse en el campo del valor que hemos encriptado.
# @comment Una vez completados los datos que faltan en el playbook vamos a la carpeta del proyecto y lo lanzamos
# (cambiar por `decidim_navarra_staging.yml` para el entorno de staging):
# @comment ```
# @comment ansible-playbook decidim_navarra_production.yml --ask-vault-pass
# @comment ```
# @comment El password que pedirá es el mismo que definimos al encriptar los valores.
# @comment - Además de esto hay que generar el fichero secrets correspondiente si no está generado ya para el entorno (staging o producción).
# Esto se hace ejecutando el siguiente comando (el ejemplo es para producción):
# @comment ```
# @comment ansible-vault create ruta/a/directorio/ansible/sites/decidim/vars/secrets_production.yml
# @comment ```
# @comment Para staging el fichero deberá ser secrets_staging.yml
# @comment El contenido del fichero debe tener las siguientes claves:
# @comment ```
# @comment secret_key_base:
# @comment census_webservice_address:
# @comment census_webservice_code:
# @comment census_webservice_purpose:
# @comment census_webservice_official_document_number:
# @comment census_webservice_official_name:
# @comment census_webservice_expedient_id:
# @comment census_webservice_procedure_code:
# @comment census_webservice_procedure_name:
# @comment census_webservice_processing_unit:
# @comment mailer_delivery_method:
# @comment email_webservice_address:
# @comment email_webservice_username_token_user:
# @comment email_webservice_username_token_password:
# @comment rollbar_access_token:
# @comment mailer_sender:
# @comment smtp_username:
# @comment smtp_password:
# @comment smtp_domain:
# @comment smtp_port:
# @comment geocoder_lookup_app_id:
# @comment geocoder_lookup_app_code:
# @comment ```
# @comment Para saber dónde poner el valor de cada clave por favor contactad con el proveedor (Populate).
# @comment - La aplicación usará una base de datos Postgresql 11.0, pero esta estará instalada en una máquina aparte. Es necesario que
# la base de datos tenga instaladas las extensiones `ltree`, `pg_trgm` y `plpgsql`. En la propia máquina de la aplicación, eso sí,
# se instalará el cliente de Postgresql 11.0. Para poder instalar el cliente es necesario que la libreria `llvm-toolset-7` esté instalada
# de antemano en la máquina.
# @comment Esta instalación creará en el servidor al usuario `centos` para gestionar la app.
- hosts: 127.0.0.1
  connection: local
  become: yes
  roles:
    ### Handlers
    - { role: 'handlers' }
    ### Provision
    - { role: 'chores/centos/epel_repository' }
    - { role: 'chores/centos/install_base_packages' }
    - { role: 'packages/common/yarn' }
    - { role: 'chores/centos/set_timezone' }
    - { role: 'user/centos' }
    ### Services
    - { role: 'chores/common/hostname' }
    - { role: 'packages/centos/fullstaq-ruby', ruby_versions: ['fullstaq-ruby-2.7.4'] }
    - { role: 'services/centos/monit', monit_services: ['sshd', 'cron', 'disk-usage'] }
    - { role: 'services/centos/memcached' }
    - { role: 'services/centos/nginx' }
    # - { role: 'services/centos/postgresql_server' }
    - { role: 'services/centos/postgresql_client' }
    - { role: 'services/centos/redis_server', redis_user: centos }
    ### Site
    - { role: 'sites/decidim' }
    - { role: 'tools/deploy' }
  vars:
    app_id: decidim
    app_git_branch: master
    app_group: www-data
    app_repo_url: "https://gesfuentes.admon-cfnavarra.es/git/r/presidencia/WebParticipacionCiudadana.git"
    app_user: centos
    backup_databases:
      - decidim
    backups_folder: /backup
    backups_user: centos
    databases:
      - decidim
    env: production
    geocoder_lookup_app_code:
    geocoder_lookup_app_id:
    hostname: decidim-navarra-production
    include_passenger: true
    memcache_listen_address: "127.0.0.1"
    memcache_memory: 256
    postgres_bind_address: "127.0.0.1"
    postgres_version: 11
    rails_env: production
    rbenv_user: centos
    redis_bind_address: "127.0.0.1"
    redis_url: redis://127.0.0.1:6379/0
    rollbar_access_token:
    sites_domains:
      - participa.navarra.es
    ssl_certificate_name: decidim
    internal_server: true
    ansible_python_interpreter: /usr/bin/python
    epel_repo_url: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
    epel_repo_gpg_key_url: "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7"
    epel_repofile_path: "/etc/yum.repos.d/epel.repo"
    populate_user: centos
    populate_user_password:
    site_db_name:
    site_db_user:
    site_db_host:
    site_db_port:
    site_db_password:
